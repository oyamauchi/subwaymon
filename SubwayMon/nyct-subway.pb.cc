// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

#include "nyct-subway.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class TripReplacementPeriodDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TripReplacementPeriod>
      _instance;
} _TripReplacementPeriod_default_instance_;
class NyctFeedHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NyctFeedHeader>
      _instance;
} _NyctFeedHeader_default_instance_;
class NyctTripDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NyctTripDescriptor>
      _instance;
} _NyctTripDescriptor_default_instance_;
class NyctStopTimeUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NyctStopTimeUpdate>
      _instance;
} _NyctStopTimeUpdate_default_instance_;
namespace protobuf_nyct_2dsubway_2eproto {
void InitDefaultsTripReplacementPeriodImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gtfs_2drealtime_2eproto::InitDefaultsTimeRange();
  {
    void* ptr = &::_TripReplacementPeriod_default_instance_;
    new (ptr) ::TripReplacementPeriod();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TripReplacementPeriod::InitAsDefaultInstance();
}

void InitDefaultsTripReplacementPeriod() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTripReplacementPeriodImpl);
}

void InitDefaultsNyctFeedHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_nyct_2dsubway_2eproto::InitDefaultsTripReplacementPeriod();
  {
    void* ptr = &::_NyctFeedHeader_default_instance_;
    new (ptr) ::NyctFeedHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NyctFeedHeader::InitAsDefaultInstance();
}

void InitDefaultsNyctFeedHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNyctFeedHeaderImpl);
}

void InitDefaultsNyctTripDescriptorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_NyctTripDescriptor_default_instance_;
    new (ptr) ::NyctTripDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NyctTripDescriptor::InitAsDefaultInstance();
}

void InitDefaultsNyctTripDescriptor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNyctTripDescriptorImpl);
}

void InitDefaultsNyctStopTimeUpdateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_NyctStopTimeUpdate_default_instance_;
    new (ptr) ::NyctStopTimeUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NyctStopTimeUpdate::InitAsDefaultInstance();
}

void InitDefaultsNyctStopTimeUpdate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNyctStopTimeUpdateImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TripReplacementPeriod, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TripReplacementPeriod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TripReplacementPeriod, route_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TripReplacementPeriod, replacement_period_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NyctFeedHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NyctFeedHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NyctFeedHeader, nyct_subway_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NyctFeedHeader, trip_replacement_period_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NyctTripDescriptor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NyctTripDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NyctTripDescriptor, train_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NyctTripDescriptor, is_assigned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NyctTripDescriptor, direction_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NyctStopTimeUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NyctStopTimeUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NyctStopTimeUpdate, scheduled_track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NyctStopTimeUpdate, actual_track_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::TripReplacementPeriod)},
  { 9, 16, sizeof(::NyctFeedHeader)},
  { 18, 26, sizeof(::NyctTripDescriptor)},
  { 29, 36, sizeof(::NyctStopTimeUpdate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TripReplacementPeriod_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_NyctFeedHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_NyctTripDescriptor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_NyctStopTimeUpdate_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "nyct-subway.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021nyct-subway.proto\032\023gtfs-realtime.proto"
      "\"b\n\025TripReplacementPeriod\022\020\n\010route_id\030\001 "
      "\001(\t\0227\n\022replacement_period\030\002 \001(\0132\033.transi"
      "t_realtime.TimeRange\"f\n\016NyctFeedHeader\022\033"
      "\n\023nyct_subway_version\030\001 \002(\t\0227\n\027trip_repl"
      "acement_period\030\002 \003(\0132\026.TripReplacementPe"
      "riod\"\244\001\n\022NyctTripDescriptor\022\020\n\010train_id\030"
      "\001 \001(\t\022\023\n\013is_assigned\030\002 \001(\010\0220\n\tdirection\030"
      "\003 \001(\0162\035.NyctTripDescriptor.Direction\"5\n\t"
      "Direction\022\t\n\005NORTH\020\001\022\010\n\004EAST\020\002\022\t\n\005SOUTH\020"
      "\003\022\010\n\004WEST\020\004\"C\n\022NyctStopTimeUpdate\022\027\n\017sch"
      "eduled_track\030\001 \001(\t\022\024\n\014actual_track\030\002 \001(\t"
      ":H\n\020nyct_feed_header\022\034.transit_realtime."
      "FeedHeader\030\351\007 \001(\0132\017.NyctFeedHeader:T\n\024ny"
      "ct_trip_descriptor\022 .transit_realtime.Tr"
      "ipDescriptor\030\351\007 \001(\0132\023.NyctTripDescriptor"
      ":`\n\025nyct_stop_time_update\022+.transit_real"
      "time.TripUpdate.StopTimeUpdate\030\351\007 \001(\0132\023."
      "NyctStopTimeUpdateB\035\n\033com.google.transit"
      ".realtime"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 769);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nyct-subway.proto", &protobuf_RegisterTypes);
  ::protobuf_gtfs_2drealtime_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_nyct_2dsubway_2eproto
const ::google::protobuf::EnumDescriptor* NyctTripDescriptor_Direction_descriptor() {
  protobuf_nyct_2dsubway_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nyct_2dsubway_2eproto::file_level_enum_descriptors[0];
}
bool NyctTripDescriptor_Direction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NyctTripDescriptor_Direction NyctTripDescriptor::NORTH;
const NyctTripDescriptor_Direction NyctTripDescriptor::EAST;
const NyctTripDescriptor_Direction NyctTripDescriptor::SOUTH;
const NyctTripDescriptor_Direction NyctTripDescriptor::WEST;
const NyctTripDescriptor_Direction NyctTripDescriptor::Direction_MIN;
const NyctTripDescriptor_Direction NyctTripDescriptor::Direction_MAX;
const int NyctTripDescriptor::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TripReplacementPeriod::InitAsDefaultInstance() {
  ::_TripReplacementPeriod_default_instance_._instance.get_mutable()->replacement_period_ = const_cast< ::transit_realtime::TimeRange*>(
      ::transit_realtime::TimeRange::internal_default_instance());
}
void TripReplacementPeriod::clear_replacement_period() {
  if (replacement_period_ != NULL) replacement_period_->Clear();
  clear_has_replacement_period();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripReplacementPeriod::kRouteIdFieldNumber;
const int TripReplacementPeriod::kReplacementPeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripReplacementPeriod::TripReplacementPeriod()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_nyct_2dsubway_2eproto::InitDefaultsTripReplacementPeriod();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TripReplacementPeriod)
}
TripReplacementPeriod::TripReplacementPeriod(const TripReplacementPeriod& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  route_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_route_id()) {
    route_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_id_);
  }
  if (from.has_replacement_period()) {
    replacement_period_ = new ::transit_realtime::TimeRange(*from.replacement_period_);
  } else {
    replacement_period_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:TripReplacementPeriod)
}

void TripReplacementPeriod::SharedCtor() {
  _cached_size_ = 0;
  route_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replacement_period_ = NULL;
}

TripReplacementPeriod::~TripReplacementPeriod() {
  // @@protoc_insertion_point(destructor:TripReplacementPeriod)
  SharedDtor();
}

void TripReplacementPeriod::SharedDtor() {
  route_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete replacement_period_;
}

void TripReplacementPeriod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripReplacementPeriod::descriptor() {
  ::protobuf_nyct_2dsubway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nyct_2dsubway_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TripReplacementPeriod& TripReplacementPeriod::default_instance() {
  ::protobuf_nyct_2dsubway_2eproto::InitDefaultsTripReplacementPeriod();
  return *internal_default_instance();
}

TripReplacementPeriod* TripReplacementPeriod::New(::google::protobuf::Arena* arena) const {
  TripReplacementPeriod* n = new TripReplacementPeriod;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripReplacementPeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:TripReplacementPeriod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!route_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*route_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(replacement_period_ != NULL);
      replacement_period_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TripReplacementPeriod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TripReplacementPeriod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string route_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->route_id().data(), static_cast<int>(this->route_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TripReplacementPeriod.route_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .transit_realtime.TimeRange replacement_period = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replacement_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TripReplacementPeriod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TripReplacementPeriod)
  return false;
#undef DO_
}

void TripReplacementPeriod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TripReplacementPeriod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string route_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->route_id().data(), static_cast<int>(this->route_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TripReplacementPeriod.route_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->route_id(), output);
  }

  // optional .transit_realtime.TimeRange replacement_period = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->replacement_period_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TripReplacementPeriod)
}

::google::protobuf::uint8* TripReplacementPeriod::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TripReplacementPeriod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string route_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->route_id().data(), static_cast<int>(this->route_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TripReplacementPeriod.route_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->route_id(), target);
  }

  // optional .transit_realtime.TimeRange replacement_period = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->replacement_period_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TripReplacementPeriod)
  return target;
}

size_t TripReplacementPeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TripReplacementPeriod)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string route_id = 1;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_id());
    }

    // optional .transit_realtime.TimeRange replacement_period = 2;
    if (has_replacement_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->replacement_period_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripReplacementPeriod::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TripReplacementPeriod)
  GOOGLE_DCHECK_NE(&from, this);
  const TripReplacementPeriod* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TripReplacementPeriod>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TripReplacementPeriod)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TripReplacementPeriod)
    MergeFrom(*source);
  }
}

void TripReplacementPeriod::MergeFrom(const TripReplacementPeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TripReplacementPeriod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_route_id();
      route_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_replacement_period()->::transit_realtime::TimeRange::MergeFrom(from.replacement_period());
    }
  }
}

void TripReplacementPeriod::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TripReplacementPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripReplacementPeriod::CopyFrom(const TripReplacementPeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TripReplacementPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripReplacementPeriod::IsInitialized() const {
  if (has_replacement_period()) {
    if (!this->replacement_period_->IsInitialized()) return false;
  }
  return true;
}

void TripReplacementPeriod::Swap(TripReplacementPeriod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripReplacementPeriod::InternalSwap(TripReplacementPeriod* other) {
  using std::swap;
  route_id_.Swap(&other->route_id_);
  swap(replacement_period_, other->replacement_period_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TripReplacementPeriod::GetMetadata() const {
  protobuf_nyct_2dsubway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nyct_2dsubway_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NyctFeedHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NyctFeedHeader::kNyctSubwayVersionFieldNumber;
const int NyctFeedHeader::kTripReplacementPeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NyctFeedHeader::NyctFeedHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_nyct_2dsubway_2eproto::InitDefaultsNyctFeedHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NyctFeedHeader)
}
NyctFeedHeader::NyctFeedHeader(const NyctFeedHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trip_replacement_period_(from.trip_replacement_period_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nyct_subway_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nyct_subway_version()) {
    nyct_subway_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nyct_subway_version_);
  }
  // @@protoc_insertion_point(copy_constructor:NyctFeedHeader)
}

void NyctFeedHeader::SharedCtor() {
  _cached_size_ = 0;
  nyct_subway_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NyctFeedHeader::~NyctFeedHeader() {
  // @@protoc_insertion_point(destructor:NyctFeedHeader)
  SharedDtor();
}

void NyctFeedHeader::SharedDtor() {
  nyct_subway_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NyctFeedHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NyctFeedHeader::descriptor() {
  ::protobuf_nyct_2dsubway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nyct_2dsubway_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NyctFeedHeader& NyctFeedHeader::default_instance() {
  ::protobuf_nyct_2dsubway_2eproto::InitDefaultsNyctFeedHeader();
  return *internal_default_instance();
}

NyctFeedHeader* NyctFeedHeader::New(::google::protobuf::Arena* arena) const {
  NyctFeedHeader* n = new NyctFeedHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NyctFeedHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:NyctFeedHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trip_replacement_period_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!nyct_subway_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nyct_subway_version_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NyctFeedHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NyctFeedHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nyct_subway_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nyct_subway_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nyct_subway_version().data(), static_cast<int>(this->nyct_subway_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NyctFeedHeader.nyct_subway_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TripReplacementPeriod trip_replacement_period = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_trip_replacement_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NyctFeedHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NyctFeedHeader)
  return false;
#undef DO_
}

void NyctFeedHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NyctFeedHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string nyct_subway_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nyct_subway_version().data(), static_cast<int>(this->nyct_subway_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctFeedHeader.nyct_subway_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nyct_subway_version(), output);
  }

  // repeated .TripReplacementPeriod trip_replacement_period = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trip_replacement_period_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trip_replacement_period(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NyctFeedHeader)
}

::google::protobuf::uint8* NyctFeedHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NyctFeedHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string nyct_subway_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nyct_subway_version().data(), static_cast<int>(this->nyct_subway_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctFeedHeader.nyct_subway_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nyct_subway_version(), target);
  }

  // repeated .TripReplacementPeriod trip_replacement_period = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trip_replacement_period_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trip_replacement_period(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NyctFeedHeader)
  return target;
}

size_t NyctFeedHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NyctFeedHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string nyct_subway_version = 1;
  if (has_nyct_subway_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nyct_subway_version());
  }
  // repeated .TripReplacementPeriod trip_replacement_period = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trip_replacement_period_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trip_replacement_period(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NyctFeedHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NyctFeedHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const NyctFeedHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NyctFeedHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NyctFeedHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NyctFeedHeader)
    MergeFrom(*source);
  }
}

void NyctFeedHeader::MergeFrom(const NyctFeedHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NyctFeedHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trip_replacement_period_.MergeFrom(from.trip_replacement_period_);
  if (from.has_nyct_subway_version()) {
    set_has_nyct_subway_version();
    nyct_subway_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nyct_subway_version_);
  }
}

void NyctFeedHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NyctFeedHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NyctFeedHeader::CopyFrom(const NyctFeedHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NyctFeedHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NyctFeedHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->trip_replacement_period())) return false;
  return true;
}

void NyctFeedHeader::Swap(NyctFeedHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NyctFeedHeader::InternalSwap(NyctFeedHeader* other) {
  using std::swap;
  trip_replacement_period_.InternalSwap(&other->trip_replacement_period_);
  nyct_subway_version_.Swap(&other->nyct_subway_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NyctFeedHeader::GetMetadata() const {
  protobuf_nyct_2dsubway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nyct_2dsubway_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NyctTripDescriptor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NyctTripDescriptor::kTrainIdFieldNumber;
const int NyctTripDescriptor::kIsAssignedFieldNumber;
const int NyctTripDescriptor::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NyctTripDescriptor::NyctTripDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_nyct_2dsubway_2eproto::InitDefaultsNyctTripDescriptor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NyctTripDescriptor)
}
NyctTripDescriptor::NyctTripDescriptor(const NyctTripDescriptor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  train_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_train_id()) {
    train_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_id_);
  }
  ::memcpy(&is_assigned_, &from.is_assigned_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&is_assigned_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:NyctTripDescriptor)
}

void NyctTripDescriptor::SharedCtor() {
  _cached_size_ = 0;
  train_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_assigned_ = false;
  direction_ = 1;
}

NyctTripDescriptor::~NyctTripDescriptor() {
  // @@protoc_insertion_point(destructor:NyctTripDescriptor)
  SharedDtor();
}

void NyctTripDescriptor::SharedDtor() {
  train_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NyctTripDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NyctTripDescriptor::descriptor() {
  ::protobuf_nyct_2dsubway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nyct_2dsubway_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NyctTripDescriptor& NyctTripDescriptor::default_instance() {
  ::protobuf_nyct_2dsubway_2eproto::InitDefaultsNyctTripDescriptor();
  return *internal_default_instance();
}

NyctTripDescriptor* NyctTripDescriptor::New(::google::protobuf::Arena* arena) const {
  NyctTripDescriptor* n = new NyctTripDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NyctTripDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:NyctTripDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!train_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*train_id_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    is_assigned_ = false;
    direction_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NyctTripDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NyctTripDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string train_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_id().data(), static_cast<int>(this->train_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NyctTripDescriptor.train_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_assigned = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_assigned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_assigned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NyctTripDescriptor.Direction direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NyctTripDescriptor_Direction_IsValid(value)) {
            set_direction(static_cast< ::NyctTripDescriptor_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NyctTripDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NyctTripDescriptor)
  return false;
#undef DO_
}

void NyctTripDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NyctTripDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string train_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_id().data(), static_cast<int>(this->train_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctTripDescriptor.train_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->train_id(), output);
  }

  // optional bool is_assigned = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_assigned(), output);
  }

  // optional .NyctTripDescriptor.Direction direction = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NyctTripDescriptor)
}

::google::protobuf::uint8* NyctTripDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NyctTripDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string train_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_id().data(), static_cast<int>(this->train_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctTripDescriptor.train_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->train_id(), target);
  }

  // optional bool is_assigned = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_assigned(), target);
  }

  // optional .NyctTripDescriptor.Direction direction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NyctTripDescriptor)
  return target;
}

size_t NyctTripDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NyctTripDescriptor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string train_id = 1;
    if (has_train_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_id());
    }

    // optional bool is_assigned = 2;
    if (has_is_assigned()) {
      total_size += 1 + 1;
    }

    // optional .NyctTripDescriptor.Direction direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NyctTripDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NyctTripDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const NyctTripDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NyctTripDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NyctTripDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NyctTripDescriptor)
    MergeFrom(*source);
  }
}

void NyctTripDescriptor::MergeFrom(const NyctTripDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NyctTripDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_train_id();
      train_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_assigned_ = from.is_assigned_;
    }
    if (cached_has_bits & 0x00000004u) {
      direction_ = from.direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NyctTripDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NyctTripDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NyctTripDescriptor::CopyFrom(const NyctTripDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NyctTripDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NyctTripDescriptor::IsInitialized() const {
  return true;
}

void NyctTripDescriptor::Swap(NyctTripDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NyctTripDescriptor::InternalSwap(NyctTripDescriptor* other) {
  using std::swap;
  train_id_.Swap(&other->train_id_);
  swap(is_assigned_, other->is_assigned_);
  swap(direction_, other->direction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NyctTripDescriptor::GetMetadata() const {
  protobuf_nyct_2dsubway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nyct_2dsubway_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NyctStopTimeUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NyctStopTimeUpdate::kScheduledTrackFieldNumber;
const int NyctStopTimeUpdate::kActualTrackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NyctStopTimeUpdate::NyctStopTimeUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_nyct_2dsubway_2eproto::InitDefaultsNyctStopTimeUpdate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NyctStopTimeUpdate)
}
NyctStopTimeUpdate::NyctStopTimeUpdate(const NyctStopTimeUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scheduled_track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scheduled_track()) {
    scheduled_track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scheduled_track_);
  }
  actual_track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_actual_track()) {
    actual_track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actual_track_);
  }
  // @@protoc_insertion_point(copy_constructor:NyctStopTimeUpdate)
}

void NyctStopTimeUpdate::SharedCtor() {
  _cached_size_ = 0;
  scheduled_track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actual_track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NyctStopTimeUpdate::~NyctStopTimeUpdate() {
  // @@protoc_insertion_point(destructor:NyctStopTimeUpdate)
  SharedDtor();
}

void NyctStopTimeUpdate::SharedDtor() {
  scheduled_track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actual_track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NyctStopTimeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NyctStopTimeUpdate::descriptor() {
  ::protobuf_nyct_2dsubway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nyct_2dsubway_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NyctStopTimeUpdate& NyctStopTimeUpdate::default_instance() {
  ::protobuf_nyct_2dsubway_2eproto::InitDefaultsNyctStopTimeUpdate();
  return *internal_default_instance();
}

NyctStopTimeUpdate* NyctStopTimeUpdate::New(::google::protobuf::Arena* arena) const {
  NyctStopTimeUpdate* n = new NyctStopTimeUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NyctStopTimeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:NyctStopTimeUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!scheduled_track_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*scheduled_track_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!actual_track_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*actual_track_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NyctStopTimeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NyctStopTimeUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scheduled_track = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scheduled_track()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scheduled_track().data(), static_cast<int>(this->scheduled_track().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NyctStopTimeUpdate.scheduled_track");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string actual_track = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actual_track()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->actual_track().data(), static_cast<int>(this->actual_track().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NyctStopTimeUpdate.actual_track");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NyctStopTimeUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NyctStopTimeUpdate)
  return false;
#undef DO_
}

void NyctStopTimeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NyctStopTimeUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scheduled_track = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scheduled_track().data(), static_cast<int>(this->scheduled_track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctStopTimeUpdate.scheduled_track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scheduled_track(), output);
  }

  // optional string actual_track = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actual_track().data(), static_cast<int>(this->actual_track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctStopTimeUpdate.actual_track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->actual_track(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NyctStopTimeUpdate)
}

::google::protobuf::uint8* NyctStopTimeUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NyctStopTimeUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scheduled_track = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scheduled_track().data(), static_cast<int>(this->scheduled_track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctStopTimeUpdate.scheduled_track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scheduled_track(), target);
  }

  // optional string actual_track = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actual_track().data(), static_cast<int>(this->actual_track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NyctStopTimeUpdate.actual_track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->actual_track(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NyctStopTimeUpdate)
  return target;
}

size_t NyctStopTimeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NyctStopTimeUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string scheduled_track = 1;
    if (has_scheduled_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scheduled_track());
    }

    // optional string actual_track = 2;
    if (has_actual_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actual_track());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NyctStopTimeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NyctStopTimeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const NyctStopTimeUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NyctStopTimeUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NyctStopTimeUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NyctStopTimeUpdate)
    MergeFrom(*source);
  }
}

void NyctStopTimeUpdate::MergeFrom(const NyctStopTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NyctStopTimeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_scheduled_track();
      scheduled_track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scheduled_track_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_actual_track();
      actual_track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actual_track_);
    }
  }
}

void NyctStopTimeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NyctStopTimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NyctStopTimeUpdate::CopyFrom(const NyctStopTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NyctStopTimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NyctStopTimeUpdate::IsInitialized() const {
  return true;
}

void NyctStopTimeUpdate::Swap(NyctStopTimeUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NyctStopTimeUpdate::InternalSwap(NyctStopTimeUpdate* other) {
  using std::swap;
  scheduled_track_.Swap(&other->scheduled_track_);
  actual_track_.Swap(&other->actual_track_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NyctStopTimeUpdate::GetMetadata() const {
  protobuf_nyct_2dsubway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nyct_2dsubway_2eproto::file_level_metadata[kIndexInFileMessages];
}

::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::FeedHeader,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctFeedHeader >, 11, false >
  nyct_feed_header(kNyctFeedHeaderFieldNumber, *::NyctFeedHeader::internal_default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::TripDescriptor,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctTripDescriptor >, 11, false >
  nyct_trip_descriptor(kNyctTripDescriptorFieldNumber, *::NyctTripDescriptor::internal_default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::TripUpdate_StopTimeUpdate,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctStopTimeUpdate >, 11, false >
  nyct_stop_time_update(kNyctStopTimeUpdateFieldNumber, *::NyctStopTimeUpdate::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
