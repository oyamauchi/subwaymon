// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

#ifndef PROTOBUF_nyct_2dsubway_2eproto__INCLUDED
#define PROTOBUF_nyct_2dsubway_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gtfs-realtime.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_nyct_2dsubway_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTripReplacementPeriodImpl();
void InitDefaultsTripReplacementPeriod();
void InitDefaultsNyctFeedHeaderImpl();
void InitDefaultsNyctFeedHeader();
void InitDefaultsNyctTripDescriptorImpl();
void InitDefaultsNyctTripDescriptor();
void InitDefaultsNyctStopTimeUpdateImpl();
void InitDefaultsNyctStopTimeUpdate();
inline void InitDefaults() {
  InitDefaultsTripReplacementPeriod();
  InitDefaultsNyctFeedHeader();
  InitDefaultsNyctTripDescriptor();
  InitDefaultsNyctStopTimeUpdate();
}
}  // namespace protobuf_nyct_2dsubway_2eproto
class NyctFeedHeader;
class NyctFeedHeaderDefaultTypeInternal;
extern NyctFeedHeaderDefaultTypeInternal _NyctFeedHeader_default_instance_;
class NyctStopTimeUpdate;
class NyctStopTimeUpdateDefaultTypeInternal;
extern NyctStopTimeUpdateDefaultTypeInternal _NyctStopTimeUpdate_default_instance_;
class NyctTripDescriptor;
class NyctTripDescriptorDefaultTypeInternal;
extern NyctTripDescriptorDefaultTypeInternal _NyctTripDescriptor_default_instance_;
class TripReplacementPeriod;
class TripReplacementPeriodDefaultTypeInternal;
extern TripReplacementPeriodDefaultTypeInternal _TripReplacementPeriod_default_instance_;

enum NyctTripDescriptor_Direction {
  NyctTripDescriptor_Direction_NORTH = 1,
  NyctTripDescriptor_Direction_EAST = 2,
  NyctTripDescriptor_Direction_SOUTH = 3,
  NyctTripDescriptor_Direction_WEST = 4
};
bool NyctTripDescriptor_Direction_IsValid(int value);
const NyctTripDescriptor_Direction NyctTripDescriptor_Direction_Direction_MIN = NyctTripDescriptor_Direction_NORTH;
const NyctTripDescriptor_Direction NyctTripDescriptor_Direction_Direction_MAX = NyctTripDescriptor_Direction_WEST;
const int NyctTripDescriptor_Direction_Direction_ARRAYSIZE = NyctTripDescriptor_Direction_Direction_MAX + 1;

const ::google::protobuf::EnumDescriptor* NyctTripDescriptor_Direction_descriptor();
inline const ::std::string& NyctTripDescriptor_Direction_Name(NyctTripDescriptor_Direction value) {
  return ::google::protobuf::internal::NameOfEnum(
    NyctTripDescriptor_Direction_descriptor(), value);
}
inline bool NyctTripDescriptor_Direction_Parse(
    const ::std::string& name, NyctTripDescriptor_Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NyctTripDescriptor_Direction>(
    NyctTripDescriptor_Direction_descriptor(), name, value);
}
// ===================================================================

class TripReplacementPeriod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TripReplacementPeriod) */ {
 public:
  TripReplacementPeriod();
  virtual ~TripReplacementPeriod();

  TripReplacementPeriod(const TripReplacementPeriod& from);

  inline TripReplacementPeriod& operator=(const TripReplacementPeriod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TripReplacementPeriod(TripReplacementPeriod&& from) noexcept
    : TripReplacementPeriod() {
    *this = ::std::move(from);
  }

  inline TripReplacementPeriod& operator=(TripReplacementPeriod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TripReplacementPeriod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TripReplacementPeriod* internal_default_instance() {
    return reinterpret_cast<const TripReplacementPeriod*>(
               &_TripReplacementPeriod_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TripReplacementPeriod* other);
  friend void swap(TripReplacementPeriod& a, TripReplacementPeriod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TripReplacementPeriod* New() const PROTOBUF_FINAL { return New(NULL); }

  TripReplacementPeriod* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TripReplacementPeriod& from);
  void MergeFrom(const TripReplacementPeriod& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TripReplacementPeriod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string route_id = 1;
  bool has_route_id() const;
  void clear_route_id();
  static const int kRouteIdFieldNumber = 1;
  const ::std::string& route_id() const;
  void set_route_id(const ::std::string& value);
  #if LANG_CXX11
  void set_route_id(::std::string&& value);
  #endif
  void set_route_id(const char* value);
  void set_route_id(const char* value, size_t size);
  ::std::string* mutable_route_id();
  ::std::string* release_route_id();
  void set_allocated_route_id(::std::string* route_id);

  // optional .transit_realtime.TimeRange replacement_period = 2;
  bool has_replacement_period() const;
  void clear_replacement_period();
  static const int kReplacementPeriodFieldNumber = 2;
  const ::transit_realtime::TimeRange& replacement_period() const;
  ::transit_realtime::TimeRange* release_replacement_period();
  ::transit_realtime::TimeRange* mutable_replacement_period();
  void set_allocated_replacement_period(::transit_realtime::TimeRange* replacement_period);

  // @@protoc_insertion_point(class_scope:TripReplacementPeriod)
 private:
  void set_has_route_id();
  void clear_has_route_id();
  void set_has_replacement_period();
  void clear_has_replacement_period();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr route_id_;
  ::transit_realtime::TimeRange* replacement_period_;
  friend struct ::protobuf_nyct_2dsubway_2eproto::TableStruct;
  friend void ::protobuf_nyct_2dsubway_2eproto::InitDefaultsTripReplacementPeriodImpl();
};
// -------------------------------------------------------------------

class NyctFeedHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NyctFeedHeader) */ {
 public:
  NyctFeedHeader();
  virtual ~NyctFeedHeader();

  NyctFeedHeader(const NyctFeedHeader& from);

  inline NyctFeedHeader& operator=(const NyctFeedHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NyctFeedHeader(NyctFeedHeader&& from) noexcept
    : NyctFeedHeader() {
    *this = ::std::move(from);
  }

  inline NyctFeedHeader& operator=(NyctFeedHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NyctFeedHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NyctFeedHeader* internal_default_instance() {
    return reinterpret_cast<const NyctFeedHeader*>(
               &_NyctFeedHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(NyctFeedHeader* other);
  friend void swap(NyctFeedHeader& a, NyctFeedHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NyctFeedHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  NyctFeedHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NyctFeedHeader& from);
  void MergeFrom(const NyctFeedHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NyctFeedHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TripReplacementPeriod trip_replacement_period = 2;
  int trip_replacement_period_size() const;
  void clear_trip_replacement_period();
  static const int kTripReplacementPeriodFieldNumber = 2;
  const ::TripReplacementPeriod& trip_replacement_period(int index) const;
  ::TripReplacementPeriod* mutable_trip_replacement_period(int index);
  ::TripReplacementPeriod* add_trip_replacement_period();
  ::google::protobuf::RepeatedPtrField< ::TripReplacementPeriod >*
      mutable_trip_replacement_period();
  const ::google::protobuf::RepeatedPtrField< ::TripReplacementPeriod >&
      trip_replacement_period() const;

  // required string nyct_subway_version = 1;
  bool has_nyct_subway_version() const;
  void clear_nyct_subway_version();
  static const int kNyctSubwayVersionFieldNumber = 1;
  const ::std::string& nyct_subway_version() const;
  void set_nyct_subway_version(const ::std::string& value);
  #if LANG_CXX11
  void set_nyct_subway_version(::std::string&& value);
  #endif
  void set_nyct_subway_version(const char* value);
  void set_nyct_subway_version(const char* value, size_t size);
  ::std::string* mutable_nyct_subway_version();
  ::std::string* release_nyct_subway_version();
  void set_allocated_nyct_subway_version(::std::string* nyct_subway_version);

  // @@protoc_insertion_point(class_scope:NyctFeedHeader)
 private:
  void set_has_nyct_subway_version();
  void clear_has_nyct_subway_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TripReplacementPeriod > trip_replacement_period_;
  ::google::protobuf::internal::ArenaStringPtr nyct_subway_version_;
  friend struct ::protobuf_nyct_2dsubway_2eproto::TableStruct;
  friend void ::protobuf_nyct_2dsubway_2eproto::InitDefaultsNyctFeedHeaderImpl();
};
// -------------------------------------------------------------------

class NyctTripDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NyctTripDescriptor) */ {
 public:
  NyctTripDescriptor();
  virtual ~NyctTripDescriptor();

  NyctTripDescriptor(const NyctTripDescriptor& from);

  inline NyctTripDescriptor& operator=(const NyctTripDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NyctTripDescriptor(NyctTripDescriptor&& from) noexcept
    : NyctTripDescriptor() {
    *this = ::std::move(from);
  }

  inline NyctTripDescriptor& operator=(NyctTripDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NyctTripDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NyctTripDescriptor* internal_default_instance() {
    return reinterpret_cast<const NyctTripDescriptor*>(
               &_NyctTripDescriptor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NyctTripDescriptor* other);
  friend void swap(NyctTripDescriptor& a, NyctTripDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NyctTripDescriptor* New() const PROTOBUF_FINAL { return New(NULL); }

  NyctTripDescriptor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NyctTripDescriptor& from);
  void MergeFrom(const NyctTripDescriptor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NyctTripDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NyctTripDescriptor_Direction Direction;
  static const Direction NORTH =
    NyctTripDescriptor_Direction_NORTH;
  static const Direction EAST =
    NyctTripDescriptor_Direction_EAST;
  static const Direction SOUTH =
    NyctTripDescriptor_Direction_SOUTH;
  static const Direction WEST =
    NyctTripDescriptor_Direction_WEST;
  static inline bool Direction_IsValid(int value) {
    return NyctTripDescriptor_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    NyctTripDescriptor_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    NyctTripDescriptor_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    NyctTripDescriptor_Direction_Direction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Direction_descriptor() {
    return NyctTripDescriptor_Direction_descriptor();
  }
  static inline const ::std::string& Direction_Name(Direction value) {
    return NyctTripDescriptor_Direction_Name(value);
  }
  static inline bool Direction_Parse(const ::std::string& name,
      Direction* value) {
    return NyctTripDescriptor_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string train_id = 1;
  bool has_train_id() const;
  void clear_train_id();
  static const int kTrainIdFieldNumber = 1;
  const ::std::string& train_id() const;
  void set_train_id(const ::std::string& value);
  #if LANG_CXX11
  void set_train_id(::std::string&& value);
  #endif
  void set_train_id(const char* value);
  void set_train_id(const char* value, size_t size);
  ::std::string* mutable_train_id();
  ::std::string* release_train_id();
  void set_allocated_train_id(::std::string* train_id);

  // optional bool is_assigned = 2;
  bool has_is_assigned() const;
  void clear_is_assigned();
  static const int kIsAssignedFieldNumber = 2;
  bool is_assigned() const;
  void set_is_assigned(bool value);

  // optional .NyctTripDescriptor.Direction direction = 3;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  ::NyctTripDescriptor_Direction direction() const;
  void set_direction(::NyctTripDescriptor_Direction value);

  // @@protoc_insertion_point(class_scope:NyctTripDescriptor)
 private:
  void set_has_train_id();
  void clear_has_train_id();
  void set_has_is_assigned();
  void clear_has_is_assigned();
  void set_has_direction();
  void clear_has_direction();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr train_id_;
  bool is_assigned_;
  int direction_;
  friend struct ::protobuf_nyct_2dsubway_2eproto::TableStruct;
  friend void ::protobuf_nyct_2dsubway_2eproto::InitDefaultsNyctTripDescriptorImpl();
};
// -------------------------------------------------------------------

class NyctStopTimeUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NyctStopTimeUpdate) */ {
 public:
  NyctStopTimeUpdate();
  virtual ~NyctStopTimeUpdate();

  NyctStopTimeUpdate(const NyctStopTimeUpdate& from);

  inline NyctStopTimeUpdate& operator=(const NyctStopTimeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NyctStopTimeUpdate(NyctStopTimeUpdate&& from) noexcept
    : NyctStopTimeUpdate() {
    *this = ::std::move(from);
  }

  inline NyctStopTimeUpdate& operator=(NyctStopTimeUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NyctStopTimeUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NyctStopTimeUpdate* internal_default_instance() {
    return reinterpret_cast<const NyctStopTimeUpdate*>(
               &_NyctStopTimeUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(NyctStopTimeUpdate* other);
  friend void swap(NyctStopTimeUpdate& a, NyctStopTimeUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NyctStopTimeUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  NyctStopTimeUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NyctStopTimeUpdate& from);
  void MergeFrom(const NyctStopTimeUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NyctStopTimeUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string scheduled_track = 1;
  bool has_scheduled_track() const;
  void clear_scheduled_track();
  static const int kScheduledTrackFieldNumber = 1;
  const ::std::string& scheduled_track() const;
  void set_scheduled_track(const ::std::string& value);
  #if LANG_CXX11
  void set_scheduled_track(::std::string&& value);
  #endif
  void set_scheduled_track(const char* value);
  void set_scheduled_track(const char* value, size_t size);
  ::std::string* mutable_scheduled_track();
  ::std::string* release_scheduled_track();
  void set_allocated_scheduled_track(::std::string* scheduled_track);

  // optional string actual_track = 2;
  bool has_actual_track() const;
  void clear_actual_track();
  static const int kActualTrackFieldNumber = 2;
  const ::std::string& actual_track() const;
  void set_actual_track(const ::std::string& value);
  #if LANG_CXX11
  void set_actual_track(::std::string&& value);
  #endif
  void set_actual_track(const char* value);
  void set_actual_track(const char* value, size_t size);
  ::std::string* mutable_actual_track();
  ::std::string* release_actual_track();
  void set_allocated_actual_track(::std::string* actual_track);

  // @@protoc_insertion_point(class_scope:NyctStopTimeUpdate)
 private:
  void set_has_scheduled_track();
  void clear_has_scheduled_track();
  void set_has_actual_track();
  void clear_has_actual_track();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr scheduled_track_;
  ::google::protobuf::internal::ArenaStringPtr actual_track_;
  friend struct ::protobuf_nyct_2dsubway_2eproto::TableStruct;
  friend void ::protobuf_nyct_2dsubway_2eproto::InitDefaultsNyctStopTimeUpdateImpl();
};
// ===================================================================

static const int kNyctFeedHeaderFieldNumber = 1001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::FeedHeader,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctFeedHeader >, 11, false >
  nyct_feed_header;
static const int kNyctTripDescriptorFieldNumber = 1001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::TripDescriptor,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctTripDescriptor >, 11, false >
  nyct_trip_descriptor;
static const int kNyctStopTimeUpdateFieldNumber = 1001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::transit_realtime::TripUpdate_StopTimeUpdate,
    ::google::protobuf::internal::MessageTypeTraits< ::NyctStopTimeUpdate >, 11, false >
  nyct_stop_time_update;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TripReplacementPeriod

// optional string route_id = 1;
inline bool TripReplacementPeriod::has_route_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TripReplacementPeriod::set_has_route_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TripReplacementPeriod::clear_has_route_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TripReplacementPeriod::clear_route_id() {
  route_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_route_id();
}
inline const ::std::string& TripReplacementPeriod::route_id() const {
  // @@protoc_insertion_point(field_get:TripReplacementPeriod.route_id)
  return route_id_.GetNoArena();
}
inline void TripReplacementPeriod::set_route_id(const ::std::string& value) {
  set_has_route_id();
  route_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TripReplacementPeriod.route_id)
}
#if LANG_CXX11
inline void TripReplacementPeriod::set_route_id(::std::string&& value) {
  set_has_route_id();
  route_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TripReplacementPeriod.route_id)
}
#endif
inline void TripReplacementPeriod::set_route_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_route_id();
  route_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TripReplacementPeriod.route_id)
}
inline void TripReplacementPeriod::set_route_id(const char* value, size_t size) {
  set_has_route_id();
  route_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TripReplacementPeriod.route_id)
}
inline ::std::string* TripReplacementPeriod::mutable_route_id() {
  set_has_route_id();
  // @@protoc_insertion_point(field_mutable:TripReplacementPeriod.route_id)
  return route_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TripReplacementPeriod::release_route_id() {
  // @@protoc_insertion_point(field_release:TripReplacementPeriod.route_id)
  clear_has_route_id();
  return route_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TripReplacementPeriod::set_allocated_route_id(::std::string* route_id) {
  if (route_id != NULL) {
    set_has_route_id();
  } else {
    clear_has_route_id();
  }
  route_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_id);
  // @@protoc_insertion_point(field_set_allocated:TripReplacementPeriod.route_id)
}

// optional .transit_realtime.TimeRange replacement_period = 2;
inline bool TripReplacementPeriod::has_replacement_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TripReplacementPeriod::set_has_replacement_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TripReplacementPeriod::clear_has_replacement_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::transit_realtime::TimeRange& TripReplacementPeriod::replacement_period() const {
  const ::transit_realtime::TimeRange* p = replacement_period_;
  // @@protoc_insertion_point(field_get:TripReplacementPeriod.replacement_period)
  return p != NULL ? *p : *reinterpret_cast<const ::transit_realtime::TimeRange*>(
      &::transit_realtime::_TimeRange_default_instance_);
}
inline ::transit_realtime::TimeRange* TripReplacementPeriod::release_replacement_period() {
  // @@protoc_insertion_point(field_release:TripReplacementPeriod.replacement_period)
  clear_has_replacement_period();
  ::transit_realtime::TimeRange* temp = replacement_period_;
  replacement_period_ = NULL;
  return temp;
}
inline ::transit_realtime::TimeRange* TripReplacementPeriod::mutable_replacement_period() {
  set_has_replacement_period();
  if (replacement_period_ == NULL) {
    replacement_period_ = new ::transit_realtime::TimeRange;
  }
  // @@protoc_insertion_point(field_mutable:TripReplacementPeriod.replacement_period)
  return replacement_period_;
}
inline void TripReplacementPeriod::set_allocated_replacement_period(::transit_realtime::TimeRange* replacement_period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(replacement_period_);
  }
  if (replacement_period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replacement_period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replacement_period, submessage_arena);
    }
    set_has_replacement_period();
  } else {
    clear_has_replacement_period();
  }
  replacement_period_ = replacement_period;
  // @@protoc_insertion_point(field_set_allocated:TripReplacementPeriod.replacement_period)
}

// -------------------------------------------------------------------

// NyctFeedHeader

// required string nyct_subway_version = 1;
inline bool NyctFeedHeader::has_nyct_subway_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NyctFeedHeader::set_has_nyct_subway_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NyctFeedHeader::clear_has_nyct_subway_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NyctFeedHeader::clear_nyct_subway_version() {
  nyct_subway_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nyct_subway_version();
}
inline const ::std::string& NyctFeedHeader::nyct_subway_version() const {
  // @@protoc_insertion_point(field_get:NyctFeedHeader.nyct_subway_version)
  return nyct_subway_version_.GetNoArena();
}
inline void NyctFeedHeader::set_nyct_subway_version(const ::std::string& value) {
  set_has_nyct_subway_version();
  nyct_subway_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NyctFeedHeader.nyct_subway_version)
}
#if LANG_CXX11
inline void NyctFeedHeader::set_nyct_subway_version(::std::string&& value) {
  set_has_nyct_subway_version();
  nyct_subway_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NyctFeedHeader.nyct_subway_version)
}
#endif
inline void NyctFeedHeader::set_nyct_subway_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nyct_subway_version();
  nyct_subway_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NyctFeedHeader.nyct_subway_version)
}
inline void NyctFeedHeader::set_nyct_subway_version(const char* value, size_t size) {
  set_has_nyct_subway_version();
  nyct_subway_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NyctFeedHeader.nyct_subway_version)
}
inline ::std::string* NyctFeedHeader::mutable_nyct_subway_version() {
  set_has_nyct_subway_version();
  // @@protoc_insertion_point(field_mutable:NyctFeedHeader.nyct_subway_version)
  return nyct_subway_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NyctFeedHeader::release_nyct_subway_version() {
  // @@protoc_insertion_point(field_release:NyctFeedHeader.nyct_subway_version)
  clear_has_nyct_subway_version();
  return nyct_subway_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NyctFeedHeader::set_allocated_nyct_subway_version(::std::string* nyct_subway_version) {
  if (nyct_subway_version != NULL) {
    set_has_nyct_subway_version();
  } else {
    clear_has_nyct_subway_version();
  }
  nyct_subway_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nyct_subway_version);
  // @@protoc_insertion_point(field_set_allocated:NyctFeedHeader.nyct_subway_version)
}

// repeated .TripReplacementPeriod trip_replacement_period = 2;
inline int NyctFeedHeader::trip_replacement_period_size() const {
  return trip_replacement_period_.size();
}
inline void NyctFeedHeader::clear_trip_replacement_period() {
  trip_replacement_period_.Clear();
}
inline const ::TripReplacementPeriod& NyctFeedHeader::trip_replacement_period(int index) const {
  // @@protoc_insertion_point(field_get:NyctFeedHeader.trip_replacement_period)
  return trip_replacement_period_.Get(index);
}
inline ::TripReplacementPeriod* NyctFeedHeader::mutable_trip_replacement_period(int index) {
  // @@protoc_insertion_point(field_mutable:NyctFeedHeader.trip_replacement_period)
  return trip_replacement_period_.Mutable(index);
}
inline ::TripReplacementPeriod* NyctFeedHeader::add_trip_replacement_period() {
  // @@protoc_insertion_point(field_add:NyctFeedHeader.trip_replacement_period)
  return trip_replacement_period_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TripReplacementPeriod >*
NyctFeedHeader::mutable_trip_replacement_period() {
  // @@protoc_insertion_point(field_mutable_list:NyctFeedHeader.trip_replacement_period)
  return &trip_replacement_period_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TripReplacementPeriod >&
NyctFeedHeader::trip_replacement_period() const {
  // @@protoc_insertion_point(field_list:NyctFeedHeader.trip_replacement_period)
  return trip_replacement_period_;
}

// -------------------------------------------------------------------

// NyctTripDescriptor

// optional string train_id = 1;
inline bool NyctTripDescriptor::has_train_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NyctTripDescriptor::set_has_train_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NyctTripDescriptor::clear_has_train_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NyctTripDescriptor::clear_train_id() {
  train_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_id();
}
inline const ::std::string& NyctTripDescriptor::train_id() const {
  // @@protoc_insertion_point(field_get:NyctTripDescriptor.train_id)
  return train_id_.GetNoArena();
}
inline void NyctTripDescriptor::set_train_id(const ::std::string& value) {
  set_has_train_id();
  train_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NyctTripDescriptor.train_id)
}
#if LANG_CXX11
inline void NyctTripDescriptor::set_train_id(::std::string&& value) {
  set_has_train_id();
  train_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NyctTripDescriptor.train_id)
}
#endif
inline void NyctTripDescriptor::set_train_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_train_id();
  train_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NyctTripDescriptor.train_id)
}
inline void NyctTripDescriptor::set_train_id(const char* value, size_t size) {
  set_has_train_id();
  train_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NyctTripDescriptor.train_id)
}
inline ::std::string* NyctTripDescriptor::mutable_train_id() {
  set_has_train_id();
  // @@protoc_insertion_point(field_mutable:NyctTripDescriptor.train_id)
  return train_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NyctTripDescriptor::release_train_id() {
  // @@protoc_insertion_point(field_release:NyctTripDescriptor.train_id)
  clear_has_train_id();
  return train_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NyctTripDescriptor::set_allocated_train_id(::std::string* train_id) {
  if (train_id != NULL) {
    set_has_train_id();
  } else {
    clear_has_train_id();
  }
  train_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_id);
  // @@protoc_insertion_point(field_set_allocated:NyctTripDescriptor.train_id)
}

// optional bool is_assigned = 2;
inline bool NyctTripDescriptor::has_is_assigned() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NyctTripDescriptor::set_has_is_assigned() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NyctTripDescriptor::clear_has_is_assigned() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NyctTripDescriptor::clear_is_assigned() {
  is_assigned_ = false;
  clear_has_is_assigned();
}
inline bool NyctTripDescriptor::is_assigned() const {
  // @@protoc_insertion_point(field_get:NyctTripDescriptor.is_assigned)
  return is_assigned_;
}
inline void NyctTripDescriptor::set_is_assigned(bool value) {
  set_has_is_assigned();
  is_assigned_ = value;
  // @@protoc_insertion_point(field_set:NyctTripDescriptor.is_assigned)
}

// optional .NyctTripDescriptor.Direction direction = 3;
inline bool NyctTripDescriptor::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NyctTripDescriptor::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NyctTripDescriptor::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NyctTripDescriptor::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
inline ::NyctTripDescriptor_Direction NyctTripDescriptor::direction() const {
  // @@protoc_insertion_point(field_get:NyctTripDescriptor.direction)
  return static_cast< ::NyctTripDescriptor_Direction >(direction_);
}
inline void NyctTripDescriptor::set_direction(::NyctTripDescriptor_Direction value) {
  assert(::NyctTripDescriptor_Direction_IsValid(value));
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:NyctTripDescriptor.direction)
}

// -------------------------------------------------------------------

// NyctStopTimeUpdate

// optional string scheduled_track = 1;
inline bool NyctStopTimeUpdate::has_scheduled_track() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NyctStopTimeUpdate::set_has_scheduled_track() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NyctStopTimeUpdate::clear_has_scheduled_track() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NyctStopTimeUpdate::clear_scheduled_track() {
  scheduled_track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scheduled_track();
}
inline const ::std::string& NyctStopTimeUpdate::scheduled_track() const {
  // @@protoc_insertion_point(field_get:NyctStopTimeUpdate.scheduled_track)
  return scheduled_track_.GetNoArena();
}
inline void NyctStopTimeUpdate::set_scheduled_track(const ::std::string& value) {
  set_has_scheduled_track();
  scheduled_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NyctStopTimeUpdate.scheduled_track)
}
#if LANG_CXX11
inline void NyctStopTimeUpdate::set_scheduled_track(::std::string&& value) {
  set_has_scheduled_track();
  scheduled_track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NyctStopTimeUpdate.scheduled_track)
}
#endif
inline void NyctStopTimeUpdate::set_scheduled_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_scheduled_track();
  scheduled_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NyctStopTimeUpdate.scheduled_track)
}
inline void NyctStopTimeUpdate::set_scheduled_track(const char* value, size_t size) {
  set_has_scheduled_track();
  scheduled_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NyctStopTimeUpdate.scheduled_track)
}
inline ::std::string* NyctStopTimeUpdate::mutable_scheduled_track() {
  set_has_scheduled_track();
  // @@protoc_insertion_point(field_mutable:NyctStopTimeUpdate.scheduled_track)
  return scheduled_track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NyctStopTimeUpdate::release_scheduled_track() {
  // @@protoc_insertion_point(field_release:NyctStopTimeUpdate.scheduled_track)
  clear_has_scheduled_track();
  return scheduled_track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NyctStopTimeUpdate::set_allocated_scheduled_track(::std::string* scheduled_track) {
  if (scheduled_track != NULL) {
    set_has_scheduled_track();
  } else {
    clear_has_scheduled_track();
  }
  scheduled_track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scheduled_track);
  // @@protoc_insertion_point(field_set_allocated:NyctStopTimeUpdate.scheduled_track)
}

// optional string actual_track = 2;
inline bool NyctStopTimeUpdate::has_actual_track() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NyctStopTimeUpdate::set_has_actual_track() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NyctStopTimeUpdate::clear_has_actual_track() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NyctStopTimeUpdate::clear_actual_track() {
  actual_track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_actual_track();
}
inline const ::std::string& NyctStopTimeUpdate::actual_track() const {
  // @@protoc_insertion_point(field_get:NyctStopTimeUpdate.actual_track)
  return actual_track_.GetNoArena();
}
inline void NyctStopTimeUpdate::set_actual_track(const ::std::string& value) {
  set_has_actual_track();
  actual_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NyctStopTimeUpdate.actual_track)
}
#if LANG_CXX11
inline void NyctStopTimeUpdate::set_actual_track(::std::string&& value) {
  set_has_actual_track();
  actual_track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NyctStopTimeUpdate.actual_track)
}
#endif
inline void NyctStopTimeUpdate::set_actual_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_actual_track();
  actual_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NyctStopTimeUpdate.actual_track)
}
inline void NyctStopTimeUpdate::set_actual_track(const char* value, size_t size) {
  set_has_actual_track();
  actual_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NyctStopTimeUpdate.actual_track)
}
inline ::std::string* NyctStopTimeUpdate::mutable_actual_track() {
  set_has_actual_track();
  // @@protoc_insertion_point(field_mutable:NyctStopTimeUpdate.actual_track)
  return actual_track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NyctStopTimeUpdate::release_actual_track() {
  // @@protoc_insertion_point(field_release:NyctStopTimeUpdate.actual_track)
  clear_has_actual_track();
  return actual_track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NyctStopTimeUpdate::set_allocated_actual_track(::std::string* actual_track) {
  if (actual_track != NULL) {
    set_has_actual_track();
  } else {
    clear_has_actual_track();
  }
  actual_track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actual_track);
  // @@protoc_insertion_point(field_set_allocated:NyctStopTimeUpdate.actual_track)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NyctTripDescriptor_Direction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NyctTripDescriptor_Direction>() {
  return ::NyctTripDescriptor_Direction_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nyct_2dsubway_2eproto__INCLUDED
